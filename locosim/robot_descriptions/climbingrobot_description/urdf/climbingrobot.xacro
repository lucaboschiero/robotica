<?xml version="1.0" ?>
<robot name="climbingrobot" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- This file is based on: https://atlas.is.localnet/confluence/display/AMDW/Quadruped+URDF+Files -->

    <!--- new_gazebo_version should be false by default because pinocchio needs it!-->
    <xacro:arg name="robot_name" default="climbingrobot"/> 
    <xacro:arg name="new_gazebo_version" default="false"/>	
    <xacro:arg name="anchorZ" default="20."/>	


    <xacro:include filename="$(find climbingrobot_description)/gazebo/gazebo.urdf.xacro">
        <xacro:arg name="task_period" value="$(arg task_period)"/>
	<xacro:arg name="robot_name" value="$(arg robot_name)"/>
    </xacro:include>


    <xacro:include filename="$(find climbingrobot_description)/urdf/climbingrobot.transmission.xacro"/>


    <link name="world"/>


   <joint name="mountain" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 $(arg anchorZ)"/>
        <parent link="world"/>
        <child link="anchor"/>
    </joint>

    <link name="anchor">
    <visual>
	<geometry>
         <sphere radius="0.4" />
	</geometry>
    </visual>
     
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
  </link>



<!--

    <joint name="target_link" type="fixed">
        <origin rpy="0 0 0" xyz=" 3.   3. 0."/>
        <parent link="world"/>
        <child link="target"/>
    </joint>-->
<!--
    <link name="target">
    <visual>
	<geometry>
         <sphere radius="0.4" />
	</geometry>
    </visual>-->
  <!--<inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
  </link>-->

  <!-- Revolute pitch joint between the mountain and the wire -->
  <joint name="mountain_wire_pitch" type="revolute">
    <parent link="anchor"/>
    <child link="pre_wire1"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint rotates about -y axis -->
    <axis xyz="0 -1 0"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>


  <link name="pre_wire1">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/cylinder.obj" scale="0.01 0.01 0.01"/>
      </geometry>
      <material name="grey">
        <color rgba=".7 .7 .7 .5"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <cylinder length="0.01" radius="0.01"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- Revolute roll joint between the mountain and the wire -->
  <joint name="mountain_wire_roll" type="revolute">
    <parent link="pre_wire1"/>
    <child link="wire"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint rotates about x axis -->
    <axis xyz="1 0 0"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>




  <link name="wire">    
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Prismatic joint between the wire and the base -->
  <joint name="wire_base_prismatic" type="prismatic">
    <parent link="wire"/>
    <child link="pre-base1"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint translates on x axis -->
    <axis xyz="0 0 -1"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>

  <link name="pre-base1"> 
      <visual>
      <origin rpy="0 0 0" xyz="0 0 ${$(arg anchorZ)/2}"/>
      <geometry>
        <cylinder radius="0.05" length="$(arg anchorZ)"/>
      </geometry>
      <material name="grey">
        <color rgba=".7 .7 .7 .5"/>
      </material>
    </visual> 

   <collision>
      <origin rpy="0 0 0" xyz="0 0 ${$(arg anchorZ)/2}"/>
      <geometry>
        <cylinder radius="0.05" length="$(arg anchorZ)"/>
      </geometry>
      <material name="grey">
        <color rgba=".7 .7 .7 .5"/>
      </material>
    </collision> 


    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- Revolute pitch joint between the wire and the base -->
  <joint name="wire_base_pitch" type="revolute">
    <parent link="pre-base1"/>
    <child link="pre-base2"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint rotates about y axis -->
    <axis xyz="0 1 0"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>

  <link name="pre-base2">
     <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- Revolute roll joint between the wire and the base -->
  <joint name="wire_base_roll" type="revolute">
    <parent link="pre-base2"/>
    <child link="pre-base3"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint rotates about x axis -->
    <axis xyz="1 0 0"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>

  <link name="pre-base3">   
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- Revolute yaw joint between the wire and the base -->
  <joint name="wire_base_yaw" type="revolute">
    <parent link="pre-base3"/>
    <child link="base_link"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joint rotates about z axis -->
    <axis xyz="0 0 1"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>



  <link name="base_link">
    <!-- BASE LINK INERTIAL -->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <mass value="0.36"/> -->
      <mass value="3.47"/>
      <!-- The base is extremely symmetrical. -->
      <inertia ixx="0.5" ixy="0.0" ixz="0.0" iyy="0.5" iyz="0.0" izz="0.5"/>
    </inertial>
    <!-- BASE LINK VISUAL -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_body.obj" scale="1 1 1"/>
      </geometry>
      <material name="red">
        <color rgba="0.749 0.380 0.410 1.0"/>
      </material>
    </visual>
    <!-- BASE LINK COLLISION -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_body.obj" scale="1 1 1"/>
      </geometry>
    </collision>
    <!-- Bullet specific paramters -->
    <contact>
      <lateral_friction value="1.0"/>
      <restitution value="0.5"/>
    </contact>
  </link>
  <!-- END BASE LINK -->


  <!-- Joint between the base and the ${prefix} upper leg -->
  <joint name="hip_pitch" type="revolute">
    <parent link="base_link"/>
    <child link="upper_link1"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joints rotates around the y-axis -->
    <axis xyz="0 -1 0"/>
    <origin rpy="0 0 0" xyz="0.0 -0.02 0.025"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="upper_link1">
    <!-- Left upper leg inertia -->
    <inertial>
      <origin rpy="0 0 0" xyz="0.0000 0.0 -0.0"/>
      <mass value="0.5"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.00004671" izz="0.01"/>
    </inertial>
    <!-- UPPER LEG LINK VISUAL 
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_upper_leg_left_side.obj"/>
      </geometry>
      <material name="grey">
        <color rgba="0.8 0.8 0.8 1.0"/>
      </material>
    </visual>-->
    <!-- UPPER LEG LINK COLLISION 
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_upper_leg_left_side.obj"/>
      </geometry>
        <material name="white">
        	<color rgba="0.898 0.913 0.941 1.0"/>
    	</material>
    </collision>-->
    <!-- Bullet specific paramters -->
    <contact>
      <lateral_friction value="1.0"/>
      <restitution value="0.5"/>
    </contact>
  </link>

  <joint name="hip_roll" type="revolute">
    <parent link="upper_link1"/>
    <child link="upper_link2"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joints rotates around the y-axis -->
    <axis xyz="-1 0 0"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="upper_link2">
    <!-- Left upper leg inertia -->
    <inertial>
      <origin rpy="0 0 0" xyz="0.0000 0.0 -0.0"/>
      <mass value="0.5"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.00004671" izz="0.01"/>
    </inertial>
    <!-- UPPER LEG LINK VISUAL -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_upper_leg_left_side.obj"/>
      </geometry>
      <material name="grey">
        <color rgba="0.7 0.7 0.7 0.5"/>
      </material>
    </visual>
    <!-- UPPER LEG LINK COLLISION -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_upper_leg_left_side.obj"/>
      </geometry>
        <material name="white">
        	<color rgba="0.898 0.913 0.941 1.0"/>
    	</material>
    </collision>
    <!-- Bullet specific paramters -->
    <contact>
      <lateral_friction value="1.0"/>
      <restitution value="0.5"/>
    </contact>
  </link>
  <!-- END UPPER LEG LINK -->

  <!-- KFE: Joint between the upper leg and the lower leg -->
  <joint name="knee" type="prismatic">
    <parent link="upper_link2"/>
    <child link="lower_link"/>
    <limit effort="1000" velocity="100.0" lower="-100" upper="100"/>
    <!-- joints rotates around the y-axis -->
    <axis xyz="0 0 1"/>
    <origin rpy="0 0 0" xyz="0 0.02 -0.08"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="lower_link">
    <!-- Left lower leg inertia -->
    <inertial>
      <origin rpy="0 0 0" xyz="0.0 0.0 -0.09"/>
      <mass value="0.5"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.00000305" izz="0.01"/>
    </inertial>
    <!-- LOWER LEG LINK VISUAL -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_lower_leg_left_side.obj" scale="1 1 1.5"/>
      </geometry>
        <material name="white">
        	<color rgba="0.898 0.913 0.941 1.0"/>
    	</material>
    </visual>
    <!-- LOWER LEG LINK COLLISION -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://climbingrobot_description/meshes/obj/with_foot/solo_lower_leg_left_side.obj"/>
      </geometry>
      <material name="grey">
        <color rgba="0.7 0.7 0.7 0.5"/>
      </material>
    </collision>
    <!-- Bullet specific paramters -->
    <contact>
      <lateral_friction value="1.0"/>
      <restitution value="0.5"/>
    </contact>
  </link>
  <!-- END LOWER LEG LINK -->
  <!-- KFE: Joint between the upper leg and the lower leg -->
  <joint name="ankle" type="fixed">
    <parent link="lower_link"/>
    <child link="foot"/>
    <origin rpy="0 0 0" xyz="0 0.008 -0.24"/>
    <!-- Limits (usefull?) -->
    <limit effort="1000" lower="-10" upper="10" velocity="1000"/>
    <!-- pybullet simulation parameters -->
    <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <link name="foot">
    <!-- FOOT INERTIAL -->
    <!-- This link is symmetrical left or right -->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.00035767"/>
      <mass value="0.00693606"/>
      <inertia ixx="0.00000057" ixy="0.0" ixz="0.0" iyy="0.00000084" iyz="0.0" izz="0.00000053"/>
    </inertial>
    <!-- FOOT VISUAL -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.02175" />
      </geometry>
	<material name="black">
		<color rgba="0.263 0.298 0.369 1"/>
	</material>
    </visual>
    <!-- FOOT COLLISION -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.02175" />
      </geometry>
      <material name="grey">
        <color rgba="0.7 0.7 0.7 0.5"/>
      </material>
    </collision>

  </link>
  <!-- END LOWER LEG LINK -->
  <!-- Joint between the base and the ${prefix} upper leg -->


    <gazebo reference="foot">
        <kp>1000000.0</kp>
        <kd>100.0</kd>
        <mu1>1.8</mu1>
        <mu2>1.8</mu2>
        <maxVel>1.0</maxVel>
        <maxContacts>1</maxContacts>
        <sensor name="foot_contact_sensor" type="contact">
                <always_on>true</always_on>
                <update_rate>1000.0</update_rate>
                <contact>
                <collision>lower_link_fixed_joint_lump__foot_collision_1</collision>
                </contact>
                <!-- the sensor readings in terms of force torques are expressed in the lowerleg frame
                because gazebo lumps the fake footframe with the real parent link, the normals are in the world frame-->
                <plugin name="foot_bumper" filename="libgazebo_ros_bumper.so">
                        <bumperTopicName>/$(arg robot_name)/foot_bumper</bumperTopicName>
                        <!--robotNamespace>solo</robotNamespace-->
                        <frameName>foot</frameName>
                </plugin>
        </sensor>
        <material>Gazebo/Black</material>
   </gazebo>


   <xacro:climbingrobot_transmission/>

</robot>
